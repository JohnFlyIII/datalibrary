services:
  # PostgreSQL database
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: legal_research
      POSTGRES_USER: legal_user
      POSTGRES_PASSWORD: legal_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/sql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_user -d legal_research"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-network

  # Qdrant vector database for legal documents
  qdrant:
    image: qdrant/qdrant:latest
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-network

  # Redis cache for legal research caching
  redis:
    image: redis:8-alpine
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-network

  # GROBID PDF processing for legal documents
  grobid:
    image: lfoppiano/grobid:latest-crf-multi-arch
    environment:
      JAVA_OPTIONS: -Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    ports:
      - "8070:8070"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/api/isalive"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - legal-network

  # Legal Knowledge Superlinked vector search server
  legal-superlinked:
    build:
      context: .
      dockerfile: legal-superlinked.Dockerfile
    environment:
      - LOG_LEVEL=INFO
      - QDRANT_URL=http://qdrant:6333
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - ENVIRONMENT=production
      - TRANSFORMERS_CACHE=/app/model_cache
    depends_on:
      qdrant:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - model_cache:/app/model_cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/docs"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-network

  # Legal Research FastAPI application
  legal-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - ./api/.env.legal
    environment:
      - DATABASE_URL=postgresql+asyncpg://legal_user:legal_password@postgres:5432/legal_research
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - GROBID_URL=http://grobid:8070
      - SUPERLINKED_URL=http://legal-superlinked:8080
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=development
      - LEGAL_DOCS_PATH=/app/legal_documents
    volumes:
      - ./api:/app
      - legal_documents:/app/legal_documents
      - processed_docs:/app/processed_docs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      grobid:
        condition: service_healthy
      legal-superlinked:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-network
    develop:
      watch:
        - action: sync
          path: ./api/app
          target: /app/app
        - action: rebuild
          path: ./api/pyproject.toml

  # Legal Research React frontend
  legal-ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    volumes:
      - ./ui:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_SUPERLINKED_URL=http://localhost:8080
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_TITLE=Legal Knowledge System
    depends_on:
      - legal-api
    networks:
      - legal-network
    develop:
      watch:
        - action: sync
          path: ./ui/src
          target: /app/src
        - action: rebuild
          path: ./ui/package.json

  # Document ingestion service (optional background service)
  legal-ingestion:
    build:
      context: ./ingestion
      dockerfile: Dockerfile
    environment:
      - SUPERLINKED_URL=http://legal-superlinked:8080
      - GROBID_URL=http://grobid:8070
      - REDIS_URL=redis://redis:6379
      - LEGAL_DOCS_PATH=/app/legal_documents
      - PROCESSED_DOCS_PATH=/app/processed_docs
      - LOG_LEVEL=INFO
    volumes:
      - legal_documents:/app/legal_documents
      - processed_docs:/app/processed_docs
    depends_on:
      - legal-superlinked
      - grobid
      - redis
    networks:
      - legal-network

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  legal_documents:
  processed_docs:
  model_cache:

networks:
  legal-network:
    driver: bridge