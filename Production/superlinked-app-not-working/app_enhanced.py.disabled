"""
Legal Knowledge Platform - Enhanced Superlinked Application with Error Handling

Purpose:
- Main application with error handling and logging
- Configurable model selection
- Robust space initialization
- Query execution monitoring

Architecture:
- Configuration-driven model selection
- Comprehensive error handling
- Structured logging for observability
- Graceful degradation support

Human Note: Monitor logs for space initialization issues
AI Agent Note: Check configuration before modifying space models
"""

import sys
import time
from typing import Dict, List, Optional, Any

from superlinked import framework as sl

# Import utilities first
from utils import (
    setup_logging, get_logger, get_config,
    SpaceInitializationError, ConfigurationError, QueryExecutionError,
    log_query_execution, log_error_with_context
)

# Setup logging
setup_logging(level="INFO", use_json=True)
logger = get_logger(__name__)

# Load configuration
try:
    config = get_config()
    logger.info("Configuration loaded successfully")
except ConfigurationError as e:
    logger.error(f"Failed to load configuration: {e}")
    sys.exit(1)

# Import schema
from schema.base.legal_document import LegalDocument

# Initialize the core schema
legal_document = LegalDocument()

# Import spaces with error handling
spaces_loaded = {
    'hierarchical': [],
    'content': [],
    'preprocessing': [],
    'temporal': [],
    'scoring': [],
    'categorical': []
}

try:
    logger.info("Starting space imports...")
    
    # Import hierarchical spaces
    try:
        from spaces.hierarchical import (
            country_jurisdiction_space, state_jurisdiction_space,
            city_jurisdiction_space, jurisdiction_path_space,
            primary_practice_space, secondary_practice_space,
            specific_practice_space, practice_path_space,
            legacy_jurisdiction_space, legacy_practice_space,
            ALL_HIERARCHICAL_SPACES
        )
        spaces_loaded['hierarchical'] = ALL_HIERARCHICAL_SPACES
        logger.info(f"Loaded {len(ALL_HIERARCHICAL_SPACES)} hierarchical spaces")
    except Exception as e:
        logger.error(f"Failed to load hierarchical spaces: {e}")
        
    # Import content spaces
    try:
        from spaces.content import (
            discovery_summary_space, discovery_topics_space, client_takeaways_space,
            exploration_provisions_space, exploration_concepts_space,
            exploration_implications_space, deep_dive_content_space,
            deep_dive_precedents_space, deep_dive_citations_space,
            common_questions_space, compliance_requirements_space,
            penalties_space, exceptions_space, keywords_space,
            synonyms_space, legislative_history_space, related_documents_space,
            ALL_CONTENT_SPACES
        )
        spaces_loaded['content'] = ALL_CONTENT_SPACES
        logger.info(f"Loaded {len(ALL_CONTENT_SPACES)} content spaces")
    except Exception as e:
        logger.error(f"Failed to load content spaces: {e}")
        
    # Import preprocessing spaces
    try:
        from spaces.preprocessing import (
            extracted_facts_space, key_findings_space, fact_locations_space,
            fact_count_space, citations_apa_space, executive_summary_space,
            summary_bullets_space, summary_conclusion_space,
            ALL_PREPROCESSING_SPACES
        )
        spaces_loaded['preprocessing'] = ALL_PREPROCESSING_SPACES
        logger.info(f"Loaded {len(ALL_PREPROCESSING_SPACES)} preprocessing spaces")
    except Exception as e:
        logger.error(f"Failed to load preprocessing spaces: {e}")
        
    # Import temporal spaces
    try:
        from spaces.temporal import (
            published_recency_space, effective_date_space,
            last_updated_space, TEMPORAL_SPACES
        )
        spaces_loaded['temporal'] = TEMPORAL_SPACES
        logger.info(f"Loaded {len(TEMPORAL_SPACES)} temporal spaces")
    except Exception as e:
        logger.error(f"Failed to load temporal spaces: {e}")
        
    # Import scoring spaces
    try:
        from spaces.scoring import (
            client_relevance_score_space, confidence_score_space,
            readability_score_space, search_weight_space,
            ALL_SCORING_SPACES
        )
        spaces_loaded['scoring'] = ALL_SCORING_SPACES
        logger.info(f"Loaded {len(ALL_SCORING_SPACES)} scoring spaces")
    except Exception as e:
        logger.error(f"Failed to load scoring spaces: {e}")
        
    # Import categorical spaces
    try:
        from spaces.categorical import (
            authority_level_space, target_audience_space,
            complexity_level_space, coverage_scope_space,
            update_priority_space, human_reviewed_space,
            content_type_space, document_category_space,
            document_purpose_space, ALL_CATEGORICAL_SPACES
        )
        spaces_loaded['categorical'] = ALL_CATEGORICAL_SPACES
        logger.info(f"Loaded {len(ALL_CATEGORICAL_SPACES)} categorical spaces")
    except Exception as e:
        logger.error(f"Failed to load categorical spaces: {e}")
        
except Exception as e:
    logger.error(f"Critical error during space import: {e}")
    log_error_with_context(logger, e, {'phase': 'space_import'})
    sys.exit(1)

# Collect all successfully loaded spaces
all_loaded_spaces = []
for category, spaces in spaces_loaded.items():
    all_loaded_spaces.extend(spaces)

logger.info(
    "Space loading complete",
    extra={
        'total_spaces': len(all_loaded_spaces),
        'by_category': {k: len(v) for k, v in spaces_loaded.items()}
    }
)

# Define the Vector Database with error handling
try:
    vector_db = sl.Qdrant(
        config.vector_db.collection_name,
        host=config.vector_db.host,
        port=config.vector_db.port,
        timeout=config.vector_db.timeout
    )
    logger.info(
        "Vector database initialized",
        extra={
            'host': config.vector_db.host,
            'port': config.vector_db.port,
            'collection': config.vector_db.collection_name
        }
    )
except Exception as e:
    logger.error(f"Failed to initialize vector database: {e}")
    raise ConfigurationError('vector_db', str(e))

# Create the Enhanced Index with error handling
try:
    legal_knowledge_index = sl.Index(
        spaces=all_loaded_spaces,
        fields=[
            # Core identification
            legal_document.id,
            legal_document.title,
            legal_document.content_text,
            
            # Preprocessing fields
            legal_document.extracted_facts,
            legal_document.fact_locations,
            legal_document.fact_count,
            legal_document.key_findings,
            legal_document.executive_summary,
            legal_document.summary_bullet_points,
            legal_document.summary_conclusion,
            
            # Hierarchical fields
            legal_document.jurisdiction_country,
            legal_document.jurisdiction_state,
            legal_document.jurisdiction_city,
            legal_document.jurisdiction_full_path,
            legal_document.practice_area_primary,
            legal_document.practice_area_secondary,
            legal_document.practice_area_specific,
            legal_document.practice_area_full_path,
            
            # All other fields...
            legal_document.jurisdiction,
            legal_document.practice_areas,
            legal_document.summary,
            legal_document.key_provisions,
            legal_document.practical_implications,
            legal_document.parent_document_id,
            legal_document.chunk_index,
            legal_document.start_char,
            legal_document.end_char,
            legal_document.chunk_context,
            legal_document.is_chunk,
            legal_document.legal_topics,
            legal_document.authority_level,
            legal_document.content_type,
            legal_document.citations_apa7,
            legal_document.internal_citations,
            legal_document.external_citations,
            legal_document.citation_format,
            legal_document.published_date,
            legal_document.effective_date,
            legal_document.last_updated,
            legal_document.last_verified,
            legal_document.source_url,
            legal_document.pdf_path,
            legal_document.broad_topics,
            legal_document.content_density,
            legal_document.coverage_scope,
            legal_document.legal_concepts,
            legal_document.client_relevance_score,
            legal_document.complexity_level,
            legal_document.case_precedents,
            legal_document.citation_context,
            legal_document.legislative_history,
            legal_document.cites_documents,
            legal_document.cited_by_documents,
            legal_document.related_documents,
            legal_document.superseded_by,
            legal_document.target_audience,
            legal_document.readability_score,
            legal_document.key_takeaways,
            legal_document.common_questions,
            legal_document.compliance_requirements,
            legal_document.deadlines_timeframes,
            legal_document.parties_affected,
            legal_document.penalties_consequences,
            legal_document.exceptions_exclusions,
            legal_document.keywords,
            legal_document.synonyms,
            legal_document.acronyms_abbreviations,
            legal_document.search_weight,
            legal_document.confidence_score,
            legal_document.human_reviewed,
            legal_document.notes_comments,
            legal_document.preprocessing_version,
            legal_document.access_frequency,
            legal_document.user_ratings,
            legal_document.search_performance,
            legal_document.update_priority
        ]
    )
    
    logger.info(
        "Index created successfully",
        extra={
            'num_spaces': len(all_loaded_spaces),
            'num_fields': len(legal_knowledge_index.fields)
        }
    )
    
except Exception as e:
    logger.error(f"Failed to create index: {e}")
    raise SpaceInitializationError('legal_knowledge_index', e)

# Enhanced Query Factory with error handling
class QueryFactory:
    """Factory for creating queries with error handling and logging"""
    
    @staticmethod
    def create_query(
        name: str,
        weights: Dict[Any, float],
        description: Optional[str] = None
    ) -> Optional[sl.Query]:
        """Create a query with error handling"""
        try:
            # Filter out None spaces
            valid_weights = {
                space: weight 
                for space, weight in weights.items() 
                if space is not None
            }
            
            if not valid_weights:
                logger.warning(f"No valid spaces for query '{name}'")
                return None
                
            query = sl.Query(legal_knowledge_index, weights=valid_weights)
            
            logger.info(
                f"Created query: {name}",
                extra={
                    'description': description,
                    'num_spaces': len(valid_weights)
                }
            )
            
            return query
            
        except Exception as e:
            logger.error(f"Failed to create query '{name}': {e}")
            return None

# Create queries with error handling
query_factory = QueryFactory()

# Discovery Query
discovery_query = query_factory.create_query(
    "discovery",
    weights={
        discovery_summary_space: 3.0,
        discovery_topics_space: 2.0,
        client_takeaways_space: 1.5,
        primary_practice_space: 1.0,
        country_jurisdiction_space: 1.0,
        content_type_space: 1.0
    },
    description="Broad exploration and topic understanding"
)

# Create the Superlinked App with error handling
try:
    app = sl.SuperlinkedApp(
        "legal_knowledge_platform",
        vector_db,
        [legal_knowledge_index]
    )
    
    logger.info("Superlinked app created successfully")
    
except Exception as e:
    logger.error(f"Failed to create Superlinked app: {e}")
    raise

# Query execution wrapper with monitoring
def execute_query(
    query: sl.Query,
    query_text: str,
    query_type: str,
    filters: Optional[Dict[str, Any]] = None,
    limit: Optional[int] = None
) -> List[Any]:
    """Execute query with error handling and monitoring"""
    start_time = time.time()
    
    try:
        # Apply default limit from config
        if limit is None:
            limit = config.query.default_limit
            
        # Execute query
        results = query.search(
            query_text,
            filters=filters,
            limit=limit
        )
        
        # Log execution metrics
        execution_time = time.time() - start_time
        log_query_execution(
            logger,
            query_type=query_type,
            query_text=query_text,
            num_results=len(results),
            execution_time=execution_time
        )
        
        return results
        
    except Exception as e:
        execution_time = time.time() - start_time
        
        # Log error with context
        log_error_with_context(
            logger,
            e,
            {
                'query_type': query_type,
                'query_text': query_text,
                'execution_time': execution_time,
                'filters': filters,
                'limit': limit
            }
        )
        
        raise QueryExecutionError(query_type, e)

if __name__ == "__main__":
    print("Enhanced Legal Knowledge Platform - Superlinked Application")
    print("="*60)
    print(f"Schema: {legal_document.__class__.__name__}")
    print(f"Vector DB: {config.vector_db.host}:{config.vector_db.port}")
    print(f"Collection: {config.vector_db.collection_name}")
    print(f"Total Spaces Loaded: {len(all_loaded_spaces)}")
    print(f"Default Model: {config.models.text_similarity_model}")
    print(f"Logging: Enabled (JSON format)")
    print("="*60)
    print("Space Loading Summary:")
    for category, spaces in spaces_loaded.items():
        print(f"  {category}: {len(spaces)} spaces")
    print("="*60)