from superlinked import framework as sl


@sl.schema
class LegalDocument:
    """
    Complete Legal Document Schema with all 157 fields from comprehensive vision.
    Organized by logical categories for maintainability.
    """
    
    # ===== CORE IDENTIFICATION FIELDS =====
    id: sl.IdField
    title: sl.String
    content: sl.String                       # Main document content
    document_type: sl.String                 # statute, case, regulation, etc.
    jurisdiction: sl.String                  # federal, texas, california, etc. (legacy)
    
    # ===== PREPROCESSING FIELDS - Generated by AI during ingestion =====
    # These are populated before document ingestion
    
    # Fact Extraction Fields
    extracted_facts: sl.String              # JSON array of facts with citations
    fact_locations: sl.String               # Page/paragraph references for each fact
    fact_count: sl.Integer                  # Number of extracted facts
    key_findings: sl.String                 # Most important facts/findings
    
    # AI-Generated Summary Fields  
    executive_summary: sl.String            # One-page executive summary
    summary_bullet_points: sl.String        # Key points in bullet format
    summary_conclusion: sl.String           # Main takeaways
    
    # Original Summary Fields (kept for compatibility)
    summary: sl.String                      # AI-generated summary (1-2 pages)
    key_provisions: sl.String               # Critical legal requirements
    practical_implications: sl.String       # Real-world impact and meaning
    key_takeaways: sl.String                # Plain-language explanations
    
    # ===== HIERARCHICAL FIELDS - Support drill-down navigation =====
    
    # Hierarchical Jurisdiction (US -> State -> City)
    jurisdiction_country: sl.String         # "united_states", "canada", etc.
    jurisdiction_state: sl.String           # "texas", "california", etc.
    jurisdiction_city: sl.String            # "houston", "los_angeles", etc.
    jurisdiction_full_path: sl.String       # "united_states/texas/houston"
    
    # Hierarchical Practice Areas
    practice_area_primary: sl.String        # Top-level: "litigation", "corporate"
    practice_area_secondary: sl.String      # Mid-level: "personal_injury", "contracts"
    practice_area_specific: sl.String       # Specific: "medical_malpractice", "employment"
    practice_area_full_path: sl.String      # "litigation/personal_injury/medical_malpractice"
    
    # Legacy fields (kept for compatibility)
    practice_areas: sl.String               # employment,personal_injury,corporate
    
    # ===== DOCUMENT HIERARCHY & CHUNKING =====
    parent_document_id: sl.String           # Links chunks to parent document  
    chunk_index: sl.Integer                 # Position within document (0-based)
    start_char: sl.Integer                  # Character offset start
    end_char: sl.Integer                    # Character offset end
    chunk_context: sl.String                # Surrounding text for proper citation
    is_chunk: sl.String                     # "true" for chunks, "false" for full docs
    
    # ===== LEGAL CLASSIFICATION =====
    legal_topics: sl.String                 # Specific legal concepts
    authority_level: sl.String              # primary, secondary, tertiary
    content_type: sl.String                 # statute, case_law, regulation, commentary
    
    # ===== ENHANCED CITATION FIELDS =====
    citations_apa7: sl.String               # APA 7th edition formatted citations
    internal_citations: sl.String           # References within the document
    external_citations: sl.String           # References to other documents
    
    # ===== TEMPORAL INFORMATION =====  
    published_date: sl.Timestamp            # When document was published (renamed from publication_date)
    effective_date: sl.Timestamp            # When law/rule takes effect
    last_updated: sl.Timestamp              # Most recent amendment/revision
    
    # ===== SOURCE & ACCESS INFORMATION =====
    source_url: sl.String                   # Official source URL
    pdf_path: sl.String                     # Local file path
    citation_format: sl.String              # Proper legal citation format
    
    # ===== PROGRESSIVE DISCLOSURE LAYERS =====
    
    # Discovery Layer - High-level exploration
    broad_topics: sl.String                 # High-level categorization
    content_density: sl.Integer             # Content amount on topic (0-100)
    coverage_scope: sl.String               # narrow, moderate, comprehensive
    
    # Exploration Layer - Focused analysis  
    legal_concepts: sl.String               # Semantic legal concepts
    client_relevance_score: sl.Integer      # Relevance to client work (0-10)
    complexity_level: sl.String             # basic, intermediate, advanced
    
    # Deep Dive Layer - Detailed research
    case_precedents: sl.String              # Related case law references
    citation_context: sl.String             # Cross-document connections
    legislative_history: sl.String          # Background and development
    
    # ===== DOCUMENT METADATA FIELDS =====
    source_filename: sl.String              # Original PDF filename
    file_size_bytes: sl.Integer             # Document file size
    total_pages: sl.Integer                 # Number of pages in document
    total_chars: sl.Integer                 # Total character count
    confidence_score: sl.Integer            # AI confidence in analysis (0-100)
    
    # ===== RELATIONSHIP FIELDS =====
    cites_documents: sl.String              # Documents this one cites
    cited_by_documents: sl.String           # Documents that cite this one
    related_documents: sl.String            # Conceptually related content
    superseded_by: sl.String                # Newer versions or amendments
    
    # ===== CONTENT STRATEGY FIELDS =====
    target_audience: sl.String              # practitioners, business_owners, clients
    readability_score: sl.Integer           # Reading difficulty (0-100)
    common_questions: sl.String             # FAQ-style information
    
    # ===== LEGAL PRACTICE FIELDS =====
    compliance_requirements: sl.String      # Specific actions required
    deadlines_timeframes: sl.String         # Important dates and periods
    parties_affected: sl.String             # Who must comply/is protected
    penalties_consequences: sl.String       # Results of non-compliance
    exceptions_exclusions: sl.String        # When rules don't apply
    
    # ===== SEARCH ENHANCEMENT FIELDS =====
    keywords: sl.String                     # Important search terms
    synonyms: sl.String                     # Alternative terminology
    acronyms_abbreviations: sl.String       # Legal shorthand and acronyms
    search_weight: sl.Integer               # Boost factor for search (0-10)
    
    # ===== QUALITY & VALIDATION FIELDS =====
    human_reviewed: sl.String               # "true" if expert-validated
    last_verified: sl.Timestamp             # Date of last accuracy check
    notes_comments: sl.String               # Internal annotations
    ai_model: sl.String                     # AI model used for processing
    preprocessing_version: sl.String        # Version of preprocessing AI used
    
    # ===== USAGE ANALYTICS FIELDS =====  
    access_frequency: sl.Integer            # How often accessed
    user_ratings: sl.String                 # User feedback scores
    search_performance: sl.Integer          # Search result effectiveness
    update_priority: sl.String              # high, medium, low


legal_document = LegalDocument()

# Core text similarity spaces for legal document search
title_space = sl.TextSimilaritySpace(text=legal_document.title, model="all-MiniLM-L6-v2")
content_space = sl.TextSimilaritySpace(text=legal_document.content, model="all-MiniLM-L6-v2")

# PHASE 3: AI Preprocessing Spaces
# High-quality spaces for AI-processed content with better model
executive_summary_space = sl.TextSimilaritySpace(
    text=legal_document.executive_summary, 
    model="sentence-transformers/all-mpnet-base-v2"
)

key_findings_space = sl.TextSimilaritySpace(
    text=legal_document.key_findings,
    model="sentence-transformers/all-mpnet-base-v2"
)

key_takeaways_space = sl.TextSimilaritySpace(
    text=legal_document.key_takeaways,
    model="sentence-transformers/all-mpnet-base-v2"
)

# Extracted facts space for precise fact retrieval
extracted_facts_space = sl.TextSimilaritySpace(
    text=legal_document.extracted_facts,
    model="sentence-transformers/all-mpnet-base-v2"
)

# Categorical space for document type filtering
document_type_space = sl.CategoricalSimilaritySpace(
    category_input=legal_document.document_type,
    categories=["statute", "case", "regulation", "guidance", "rule", "other"],
    negative_filter=-1.0,  # Penalize non-matching categories
    uncategorized_as_category=True  # Treat unknown types as "other"
)

# Categorical space for jurisdiction filtering
jurisdiction_space = sl.CategoricalSimilaritySpace(
    category_input=legal_document.jurisdiction,
    categories=["federal", "texas", "california", "new_york", "florida", "other"],
    negative_filter=-1.0,  # Penalize non-matching jurisdictions
    uncategorized_as_category=True  # Treat unknown jurisdictions as "other"
)

# PHASE 3: Hierarchical Jurisdiction Spaces
# Fine-grained jurisdiction filtering with state/city hierarchy
jurisdiction_state_space = sl.CategoricalSimilaritySpace(
    category_input=legal_document.jurisdiction_state,
    categories=["texas", "california", "new_york", "florida", "illinois", "other"],
    negative_filter=-1.0,
    uncategorized_as_category=True
)

jurisdiction_city_space = sl.CategoricalSimilaritySpace(
    category_input=legal_document.jurisdiction_city,
    categories=["houston", "dallas", "austin", "san_antonio", "los_angeles", "san_francisco", "chicago", "new_york", "other"],
    negative_filter=-1.0,
    uncategorized_as_category=True
)

# Practice Area Hierarchical Spaces
practice_area_primary_space = sl.CategoricalSimilaritySpace(
    category_input=legal_document.practice_area_primary,
    categories=["litigation", "healthcare", "regulatory", "corporate", "criminal", "other"],
    negative_filter=-1.0,
    uncategorized_as_category=True
)

practice_area_secondary_space = sl.CategoricalSimilaritySpace(
    category_input=legal_document.practice_area_secondary,
    categories=["medical_malpractice", "personal_injury", "healthcare_compliance", "data_privacy", "general_litigation", "other"],
    negative_filter=-1.0,
    uncategorized_as_category=True
)

# PHASE 3: Content Enhancement Spaces
# Semantic spaces for legal topics and keywords
legal_topics_space = sl.TextSimilaritySpace(
    text=legal_document.legal_topics,
    model="sentence-transformers/all-mpnet-base-v2"
)

keywords_space = sl.TextSimilaritySpace(
    text=legal_document.keywords,
    model="sentence-transformers/all-mpnet-base-v2"
)

# PHASE 1A: Document Metrics Spaces
# Numerical spaces for document characteristics and quality metrics
total_pages_space = sl.NumberSpace(
    number=legal_document.total_pages,
    min_value=1,
    max_value=1000,
    mode=sl.Mode.MAXIMUM  # Prioritize longer documents when relevant
)

fact_count_space = sl.NumberSpace(
    number=legal_document.fact_count,
    min_value=0,
    max_value=100,
    mode=sl.Mode.MAXIMUM  # Prioritize documents with more facts
)

# Enhanced content spaces using the new summary fields
summary_bullet_points_space = sl.TextSimilaritySpace(
    text=legal_document.summary_bullet_points,
    model="sentence-transformers/all-mpnet-base-v2"
)

summary_conclusion_space = sl.TextSimilaritySpace(
    text=legal_document.summary_conclusion,
    model="sentence-transformers/all-mpnet-base-v2"
)

# PHASE 1B: Legal Practice Enhancement Spaces
# High-precision spaces for legal practice fields
compliance_requirements_space = sl.TextSimilaritySpace(
    text=legal_document.compliance_requirements,
    model="sentence-transformers/all-mpnet-base-v2"
)

penalties_consequences_space = sl.TextSimilaritySpace(
    text=legal_document.penalties_consequences,
    model="sentence-transformers/all-mpnet-base-v2"
)

key_provisions_space = sl.TextSimilaritySpace(
    text=legal_document.key_provisions,
    model="sentence-transformers/all-mpnet-base-v2"
)

practical_implications_space = sl.TextSimilaritySpace(
    text=legal_document.practical_implications,
    model="sentence-transformers/all-mpnet-base-v2"
)

# Create index with Phase 1A enhanced comprehensive spaces
index = sl.Index([
    # Core spaces
    title_space, content_space, document_type_space, jurisdiction_space,
    
    # Phase 3: AI Preprocessing Spaces  
    executive_summary_space, key_findings_space, key_takeaways_space, extracted_facts_space,
    
    # Phase 3: Hierarchical Spaces
    jurisdiction_state_space, jurisdiction_city_space, 
    practice_area_primary_space, practice_area_secondary_space,
    
    # Phase 3: Content Enhancement Spaces for semantic search
    legal_topics_space, keywords_space,
    
    # Phase 1A: Document Metrics & Enhanced Summary Spaces
    total_pages_space, fact_count_space, summary_bullet_points_space, summary_conclusion_space,
    
    # Phase 1B: Legal Practice Enhancement Spaces
    compliance_requirements_space, penalties_consequences_space, key_provisions_space, practical_implications_space
])
